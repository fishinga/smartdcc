<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.attiot.railAnaly.base.dao.TSRoleDao">
	<resultMap id="TSRole" type="com.attiot.railAnaly.base.entity.TSRole">
		<id property="id" column="ID" javaType="String" jdbcType="VARCHAR"/>
		<result property="rolecode" column="rolecode" javaType="String" jdbcType="VARCHAR"/>
		<result property="rolename" column="rolename" javaType="String" jdbcType="VARCHAR"/>
		<result property="updateName" column="update_name" javaType="String" jdbcType="VARCHAR"/>
		<result property="updateDate" column="update_date" javaType="Date" jdbcType="TIMESTAMP"/>
		<result property="updateBy" column="update_by" javaType="String" jdbcType="VARCHAR"/>
		<result property="createName" column="create_name" javaType="String" jdbcType="VARCHAR"/>
		<result property="createDate" column="create_date" javaType="Date" jdbcType="TIMESTAMP"/>
		<result property="createBy" column="create_by" javaType="String" jdbcType="VARCHAR"/>

	</resultMap>
	
	<insert id="insert" parameterType="com.attiot.railAnaly.base.entity.TSRole">
		INSERT INTO t_s_role
		(
			id,
			<include refid="column" />
		) VALUES (
			#{id,jdbcType=VARCHAR},
			#{rolecode,jdbcType=VARCHAR},
			#{rolename,jdbcType=VARCHAR},
			#{updateName,jdbcType=VARCHAR},
			#{updateDate,jdbcType=TIMESTAMP},
			#{updateBy,jdbcType=VARCHAR},
			#{createName,jdbcType=VARCHAR},
			#{createDate,jdbcType=TIMESTAMP},
			#{createBy,jdbcType=VARCHAR}
		)
		<selectKey keyProperty="id" resultType="String" order="BEFORE">
			SELECT REPLACE(UUID(),'-','')
		</selectKey>
	</insert>

	<update id="update" parameterType="com.attiot.railAnaly.base.entity.TSRole">
		UPDATE t_s_role
		SET
			`rolecode` = #{rolecode},
			`rolename` = #{rolename},
			`update_name` = #{updateName},
			`update_date` = #{updateDate},
			`update_by` = #{updateBy},
			`create_name` = #{createName},
			`create_date` = #{createDate},
			`create_by` = #{createBy}
		WHERE ID = #{id}
	</update>

	<delete id="delete" parameterType="String">
		DELETE FROM t_s_role WHERE ID = #{id}
	</delete>

	<select id="getById" parameterType="String" resultMap="TSRole">
		SELECT
			ID,
			<include refid="column" />
		FROM t_s_role
		<where>
			ID = #{id}
		</where>
	</select>


	<select id="getByUserId" parameterType="String" resultMap="TSRole">
		SELECT
			r.*
		from
			t_s_role r
		INNER JOIN t_s_role_user ru on r.id = ru.roleid
		WHERE ru.userid = #{userId}
	</select>


	<select id="getRoleCode" parameterType="String" resultMap="TSRole">
		SELECT
			r.*
		FROM
			`t_s_role` r
		INNER JOIN t_s_role_user ru ON r.id = ru.roleid
		<where>
			ru.userid = #{userId}
		</where>
	</select>

	<select id="getByParam" parameterType="com.attiot.railAnaly.base.param.TSRoleQueryParam" resultMap="TSRole">
		SELECT ID,
		<include refid="column" />
		FROM t_s_role
		<include refid="where" />
		LIMIT 1
	</select>

	<select id="query" parameterType="com.attiot.railAnaly.base.param.TSRoleQueryParam"	resultMap="TSRole">
		SELECT
			ID,
			<include refid="column" />
		FROM t_s_role
		<include refid="where" />
		<include refid="basic" />
	</select>

	<select id="queryCount" parameterType="com.attiot.railAnaly.base.param.TSRoleQueryParam" resultType="Long">
		SELECT COUNT(0)
		FROM t_s_role
		<include refid="where" />
	</select>

	<sql id="column">
		`rolecode`,
		`rolename`,
		`update_name`,
		`update_date`,
		`update_by`,
		`create_name`,
		`create_date`,
		`create_by`
	</sql>

	<sql id="columnTable">
		t_s_role.`rolecode`,
		t_s_role.`rolename`,
		t_s_role.`update_name`,
		t_s_role.`update_date`,
		t_s_role.`update_by`,
		t_s_role.`create_name`,
		t_s_role.`create_date`,
		t_s_role.`create_by`
	</sql>

	<sql id="where">
		<where>
			<if test="id != null"> AND ID = #{id}</if>
			<if test="rolecode != null"> AND rolecode = #{rolecode}</if>
			<if test="rolename != null"> AND rolename = #{rolename}</if>
			<if test="updateName != null"> AND update_name = #{updateName}</if>
			<if test="updateDate != null"> AND update_date = #{updateDate}</if>
			<if test="updateBy != null"> AND update_by = #{updateBy}</if>
			<if test="createName != null"> AND create_name = #{createName}</if>
			<if test="createDate != null"> AND create_date = #{createDate}</if>
			<if test="createBy != null"> AND create_by = #{createBy}</if>
		</where>
	</sql>

	<sql id="basic">
		<if test="column != null">ORDER BY #{column} #{sort}</if>
		<if test="pageNo != -1">LIMIT #{startIndex}, #{pageSize}</if>
		<if test="pageNo == -1 and limit != -1">LIMIT #{limit}</if>
		<if test="lock">
			<if test="lockMode == 0">FOR UPDATE</if>
			<if test="lockMode == 1">LOCK IN SHARE MODE</if>
		</if>
	</sql>
</mapper>
