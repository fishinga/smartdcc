<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.attiot.railAnaly.map.dao.OaAttendanceDao">
	<resultMap id="OaAttendance" type="com.attiot.railAnaly.map.entity.OaAttendance">
		<id property="id" column="id" javaType="String" jdbcType="VARCHAR"/>
		<result property="userId" column="user_id" javaType="String" jdbcType="VARCHAR"/>
		<result property="signType" column="sign_type" javaType="String" jdbcType="VARCHAR"/>
		<result property="signTime" column="sign_time" javaType="String" jdbcType="VARCHAR"/>
		<result property="signState" column="sign_state" javaType="String" jdbcType="VARCHAR"/>
		<result property="createtime" column="createtime" javaType="Date" jdbcType="TIMESTAMP"/>
		<result property="modifytime" column="modifytime" javaType="Date" jdbcType="TIMESTAMP"/>
		<result property="modifor" column="modifor" javaType="String" jdbcType="VARCHAR"/>

	</resultMap>
	<!--查询一条数据-->
	<select id="findByUser_id" parameterType="string" resultMap="OaAttendance" >
		select
		id,
	   <include refid="column"/>
		from a_oa_attendance
		WHERE to_days(sign_time) = to_days(now())
		AND user_id = #{user_id}
	</select>


	<insert id="insert" parameterType="com.attiot.railAnaly.map.entity.OaAttendance">
		INSERT INTO a_oa_attendance
		(
			id,
			<include refid="column" />
		) VALUES (
			#{id,jdbcType=VARCHAR},
			#{userId,jdbcType=VARCHAR},
			#{signType,jdbcType=VARCHAR},
			#{signTime,jdbcType=VARCHAR},
			#{signState,jdbcType=VARCHAR},
			#{createtime,jdbcType=TIMESTAMP},
			#{modifytime,jdbcType=TIMESTAMP},
			#{modifor,jdbcType=VARCHAR}
		)
		<selectKey keyProperty="id" resultType="String" order="BEFORE">
			SELECT REPLACE(UUID(),'-','')
		</selectKey>
	</insert>

	<update id="update" parameterType="com.attiot.railAnaly.map.entity.OaAttendance">
		UPDATE a_oa_attendance
		SET
			`user_id` = #{userId},
			`sign_type` = #{signType},
			`sign_time` = #{signTime},
			`sign_state` = #{signState},
			`createtime` = #{createtime},
			`modifytime` = #{modifytime},
			`modifor` = #{modifor}
		WHERE ID = #{id}
	</update>

	<delete id="delete" parameterType="String">
		DELETE FROM a_oa_attendance WHERE ID = #{id}
	</delete>

	<select id="getById" parameterType="String" resultMap="OaAttendance">
		SELECT
			ID,
			<include refid="column" />
		FROM a_oa_attendance
		<where>
			ID = #{id}
		</where>
	</select>

	<select id="getByParam" parameterType="com.attiot.railAnaly.map.param.OaAttendanceQueryParam" resultMap="OaAttendance">
		SELECT ID,
		<include refid="column" />
		FROM a_oa_attendance
		<include refid="where" />
		LIMIT 1
	</select>

	<select id="query" parameterType="com.attiot.railAnaly.map.param.OaAttendanceQueryParam"	resultMap="OaAttendance">
		SELECT
			ID,
			<include refid="column" />
		FROM a_oa_attendance
		<include refid="where" />
		<include refid="basic" />
	</select>

	<select id="queryCount" parameterType="com.attiot.railAnaly.map.param.OaAttendanceQueryParam" resultType="Long">
		SELECT COUNT(0)
		FROM a_oa_attendance
		<include refid="where" />
	</select>

	<sql id="column">
		`user_id`,
		`sign_type`,
		`sign_time`,
		`sign_state`,
		`createtime`,
		`modifytime`,
		`modifor`
	</sql>

	<sql id="columnTable">
		a_oa_attendance.`user_id`,
		a_oa_attendance.`sign_type`,
		a_oa_attendance.`sign_time`,
		a_oa_attendance.`sign_state`,
		a_oa_attendance.`createtime`,
		a_oa_attendance.`modifytime`,
		a_oa_attendance.`modifor`
	</sql>

	<sql id="where">
		<where>
			<if test="id != null"> AND id = #{id}</if>
			<if test="userId != null"> AND user_id = #{userId}</if>
			<if test="signType != null"> AND sign_type = #{signType}</if>
			<if test="signTime != null"> AND sign_time = #{signTime}</if>
			<if test="signState != null"> AND sign_state = #{signState}</if>
			<if test="createtime != null"> AND createtime = #{createtime}</if>
			<if test="modifytime != null"> AND modifytime = #{modifytime}</if>
			<if test="modifor != null"> AND modifor = #{modifor}</if>
		</where>
	</sql>

	<sql id="basic">
		<if test="column != null">ORDER BY #{column} #{sort}</if>
		<if test="pageNo != -1">LIMIT #{startIndex}, #{pageSize}</if>
		<if test="pageNo == -1 and limit != -1">LIMIT #{limit}</if>
		<if test="lock">
			<if test="lockMode == 0">FOR UPDATE</if>
			<if test="lockMode == 1">LOCK IN SHARE MODE</if>
		</if>
	</sql>
</mapper>
