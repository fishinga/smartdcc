<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.attiot.railAnaly.task.dao.TaskReformColumnsDao">
	<resultMap id="TaskReformColumns" type="com.attiot.railAnaly.task.entity.TaskReformColumns">
		<id property="id" column="id" javaType="String" jdbcType="VARCHAR"/>
		<result property="reformId" column="reform_id" javaType="String" jdbcType="VARCHAR"/>
		<result property="parentId" column="parent_id" javaType="String" jdbcType="VARCHAR"/>
		<result property="colSort" column="col_sort" javaType="Integer" jdbcType="INTEGER"/>
		<result property="colCode" column="col_code" javaType="String" jdbcType="VARCHAR"/>
		<result property="colName" column="col_name" javaType="String" jdbcType="VARCHAR"/>
		<result property="colType" column="col_type" javaType="Integer" jdbcType="INTEGER"/>
		<result property="defaultVal" column="default_val" javaType="String" jdbcType="VARCHAR"/>
		<result property="colItems" column="col_Items" javaType="String" jdbcType="VARCHAR"/>

	</resultMap>
	
	<insert id="insert" parameterType="com.attiot.railAnaly.task.entity.TaskReformColumns">
		INSERT INTO a_task_reform_columns
		(
			id,
			<include refid="column" />
		) VALUES (
			#{id,jdbcType=VARCHAR},
			#{reformId,jdbcType=VARCHAR},
			#{parentId,jdbcType=VARCHAR},
			#{colSort,jdbcType=INTEGER},
			#{colCode,jdbcType=VARCHAR},
			#{colName,jdbcType=VARCHAR},
			#{colType,jdbcType=INTEGER},
			#{defaultVal,jdbcType=VARCHAR},
			#{colItems,jdbcType=VARCHAR}
		)
		<selectKey keyProperty="id" resultType="String" order="BEFORE">
			SELECT REPLACE(UUID(),'-','')
		</selectKey>
	</insert>

	<update id="update" parameterType="com.attiot.railAnaly.task.entity.TaskReformColumns">
		UPDATE a_task_reform_columns
		SET
			`reform_id` = #{reformId},
			`parent_id` = #{parentId},
			`col_sort` = #{colSort},
			`col_code` = #{colCode},
			`col_name` = #{colName},
			`col_type` = #{colType},
			`default_val` = #{defaultVal},
			`col_Items` = #{colItems}
		WHERE ID = #{id}
	</update>

	<delete id="delete" parameterType="String">
		DELETE FROM a_task_reform_columns WHERE ID = #{id}
	</delete>

	<select id="getById" parameterType="String" resultMap="TaskReformColumns">
		SELECT
			ID,
			<include refid="column" />
		FROM a_task_reform_columns
		<where>
			ID = #{id}
		</where>
	</select>

	<select id="getByParam" parameterType="com.attiot.railAnaly.task.param.TaskReformColumnsQueryParam" resultMap="TaskReformColumns">
		SELECT ID,
		<include refid="column" />
		FROM a_task_reform_columns
		<include refid="where" />
		LIMIT 1
	</select>

	<select id="query" parameterType="com.attiot.railAnaly.task.param.TaskReformColumnsQueryParam"	resultMap="TaskReformColumns">
		SELECT
			ID,
			<include refid="column" />
		FROM a_task_reform_columns
		<include refid="where" />
		<include refid="basic" />
	</select>

	<select id="queryCount" parameterType="com.attiot.railAnaly.task.param.TaskReformColumnsQueryParam" resultType="Long">
		SELECT COUNT(0)
		FROM a_task_reform_columns
		<include refid="where" />
	</select>

	<sql id="column">
		`reform_id`,
		`parent_id`,
		`col_sort`,
		`col_code`,
		`col_name`,
		`col_type`,
		`default_val`,
		`col_Items`
	</sql>

	<sql id="columnTable">
		a_task_reform_columns.`reform_id`,
		a_task_reform_columns.`parent_id`,
		a_task_reform_columns.`col_sort`,
		a_task_reform_columns.`col_code`,
		a_task_reform_columns.`col_name`,
		a_task_reform_columns.`col_type`,
		a_task_reform_columns.`default_val`,
		a_task_reform_columns.`col_Items`
	</sql>

	<sql id="where">
		<where>
			<if test="id != null"> AND id = #{id}</if>
			<if test="reformId != null"> AND reform_id = #{reformId}</if>
			<if test="parentId != null"> AND parent_id = #{parentId}</if>
			<if test="colSort != null"> AND col_sort = #{colSort}</if>
			<if test="colCode != null"> AND col_code = #{colCode}</if>
			<if test="colName != null"> AND col_name = #{colName}</if>
			<if test="colType != null"> AND col_type = #{colType}</if>
			<if test="defaultVal != null"> AND default_val = #{defaultVal}</if>
			<if test="colItems != null"> AND col_Items = #{colItems}</if>
		</where>
	</sql>

	<sql id="basic">
		<if test="column != null">ORDER BY #{column} #{sort}</if>
		<if test="pageNo != -1">LIMIT #{startIndex}, #{pageSize}</if>
		<if test="pageNo == -1 and limit != -1">LIMIT #{limit}</if>
		<if test="lock">
			<if test="lockMode == 0">FOR UPDATE</if>
			<if test="lockMode == 1">LOCK IN SHARE MODE</if>
		</if>
	</sql>
</mapper>
