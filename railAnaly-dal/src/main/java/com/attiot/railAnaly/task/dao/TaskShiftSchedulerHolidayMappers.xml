<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.attiot.railAnaly.task.dao.TaskShiftSchedulerHolidayDao">
	<resultMap id="TaskShiftSchedulerHoliday" type="com.attiot.railAnaly.task.entity.TaskShiftSchedulerHoliday">
		<id property="id" column="id" javaType="String" jdbcType="VARCHAR"/>
		<result property="startDate" column="start_date" javaType="Date" jdbcType="TIMESTAMP"/>
		<result property="startWeek" column="start_week" javaType="String" jdbcType="VARCHAR"/>
		<result property="dayShift" column="day_shift" javaType="String" jdbcType="VARCHAR"/>
		<result property="nightShift" column="night_shift" javaType="String" jdbcType="VARCHAR"/>
		<result property="repairOne" column="repair_one" javaType="String" jdbcType="VARCHAR"/>
		<result property="repairTwo" column="repair_two" javaType="String" jdbcType="VARCHAR"/>

	</resultMap>
	
	<insert id="insert" parameterType="com.attiot.railAnaly.task.entity.TaskShiftSchedulerHoliday">
		INSERT INTO a_task_shift_scheduler_holiday
		(
			id,
			<include refid="column" />
		) VALUES (
			#{id,jdbcType=VARCHAR},
			#{startDate,jdbcType=TIMESTAMP},
			#{startWeek,jdbcType=VARCHAR},
			#{dayShift,jdbcType=VARCHAR},
			#{nightShift,jdbcType=VARCHAR},
			#{repairOne,jdbcType=VARCHAR},
			#{repairTwo,jdbcType=VARCHAR}
		)
		<selectKey keyProperty="id" resultType="String" order="BEFORE">
			SELECT REPLACE(UUID(),'-','')
		</selectKey>
	</insert>

	<update id="update" parameterType="com.attiot.railAnaly.task.entity.TaskShiftSchedulerHoliday">
		UPDATE a_task_shift_scheduler_holiday
		SET
			`start_date` = #{startDate},
			`start_week` = #{startWeek},
			`day_shift` = #{dayShift},
			`night_shift` = #{nightShift},
			`repair_one` = #{repairOne},
			`repair_two` = #{repairTwo}
		WHERE ID = #{id}
	</update>

	<delete id="delete" parameterType="String">
		DELETE FROM a_task_shift_scheduler_holiday WHERE ID = #{id}
	</delete>

	<select id="getById" parameterType="String" resultMap="TaskShiftSchedulerHoliday">
		SELECT
			ID,
			<include refid="column" />
		FROM a_task_shift_scheduler_holiday
		<where>
			ID = #{id}
		</where>
	</select>

	<select id="getByWorkdate" parameterType="String" resultMap="TaskShiftSchedulerHoliday">
		SELECT
		ID,
		<include refid="column" />
		FROM a_task_shift_scheduler_holiday
		where date_format(start_date,'%Y-%m-%d')=#{workdate}
	</select>


	<select id="getByParam" parameterType="com.attiot.railAnaly.task.param.TaskShiftSchedulerHolidayQueryParam" resultMap="TaskShiftSchedulerHoliday">
		SELECT ID,
		<include refid="column" />
		FROM a_task_shift_scheduler_holiday
		<include refid="where" />
		LIMIT 1
	</select>

	<select id="query" parameterType="com.attiot.railAnaly.task.param.TaskShiftSchedulerHolidayQueryParam"	resultMap="TaskShiftSchedulerHoliday">
		SELECT
			ID,
			<include refid="column" />
		FROM a_task_shift_scheduler_holiday
		<include refid="where" />
		<include refid="basic" />
	</select>

	<select id="queryCount" parameterType="com.attiot.railAnaly.task.param.TaskShiftSchedulerHolidayQueryParam" resultType="Long">
		SELECT COUNT(0)
		FROM a_task_shift_scheduler_holiday
		<include refid="where" />
	</select>

	<sql id="column">
		`start_date`,
		`start_week`,
		`day_shift`,
		`night_shift`,
		`repair_one`,
		`repair_two`
	</sql>

	<sql id="columnTable">
		a_task_shift_scheduler_holiday.`start_date`,
		a_task_shift_scheduler_holiday.`start_week`,
		a_task_shift_scheduler_holiday.`day_shift`,
		a_task_shift_scheduler_holiday.`night_shift`,
		a_task_shift_scheduler_holiday.`repair_one`,
		a_task_shift_scheduler_holiday.`repair_two`
	</sql>

	<sql id="where">
		<where>
			<if test="id != null"> AND id = #{id}</if>
			<if test="startDate != null"> AND start_date = #{startDate}</if>
			<if test="startWeek != null"> AND start_week = #{startWeek}</if>
			<if test="dayShift != null"> AND day_shift = #{dayShift}</if>
			<if test="nightShift != null"> AND night_shift = #{nightShift}</if>
			<if test="repairOne != null"> AND repair_one = #{repairOne}</if>
			<if test="repairTwo != null"> AND repair_two = #{repairTwo}</if>
		</where>
	</sql>

	<sql id="basic">
		<if test="column != null">ORDER BY #{column} #{sort}</if>
		<if test="pageNo != -1">LIMIT #{startIndex}, #{pageSize}</if>
		<if test="pageNo == -1 and limit != -1">LIMIT #{limit}</if>
		<if test="lock">
			<if test="lockMode == 0">FOR UPDATE</if>
			<if test="lockMode == 1">LOCK IN SHARE MODE</if>
		</if>
	</sql>
</mapper>
